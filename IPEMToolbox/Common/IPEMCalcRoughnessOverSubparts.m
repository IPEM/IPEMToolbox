function [outRoughness,outDiffCents] = IPEMCalcRoughnessOverSubparts(varargin)
% Usage:
%   [outRoughness,outDiffCents] = 
%     IPEMCalcRoughnessOverSubparts(inOriginalFileName,inOriginalFilePath,
%                                   inCentsToRaise,inCentsPerStep,
%                                   inMixedFileName,inMixedFilePath)
%
% Description:
%   Calculates the roughness over the subparts of a sound file that was made by
%   CoolEdit2000 using a script file generated by IPEMGeneratePitchShiftScript.
%   An array is returned containing a value for the roughness for each
%   subpart of the sound file.
%
% Input arguments:
%   inOriginalFileName = name of the original sound file that was processed
%   inOriginalFilePath = path to the location of the original sound file
%                        if empty or not specified, IPEMRootDir('input')\Sounds'
%                        is used by default
%   inCentsToRaise = maximum number of cents the pitch was raised
%                    if empty or not specified, 1200 is used by default
%   inCentsPerStep = number of cents the pitch was raised per step
%                    if empty or not specified, 100 is used by default
%   inMixedFileName = name of the file containing the mix of the original 
%                     and the pitch shifted sounds
%                     if empty or not specified, the same name as the original
%                     file is used, but now ending on '_mixed.wav' instead of
%                     just '.wav'
%   inMixedFilePath = path to the mixed file
%                     if empty or not specified, the same location as the
%                     original sound file is used by default
%
% Output:
%   outRoughness = the roughness values
%   outDiffCents = the corresponding difference in pitch (in cents)
%
% Example:
%   [Roughness,DiffCents] = IPEMCalcRoughnessOverSubparts('bottle.wav');
%
% Authors:
%   Koen Tanghe - 20011008
% ------------------------------------------------------------------------------

% ------------------------------------------------------------------------------
% IPEM Toolbox - Toolbox for perception-based music analysis 
% Copyright (C) 2005 Ghent University
% 
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
% ------------------------------------------------------------------------------

% Handle input arguments
[inOriginalFileName,inOriginalFilePath,inCentsToRaise,inCentsPerStep,inMixedFileName,inMixedFilePath] = ...
    IPEMHandleInputArguments(varargin,2,{[],fullfile(IPEMRootDir('input'),'Sounds'),1200,100,[],[]});

% Additional checking
theOriginalFile = fullfile(inOriginalFilePath,inOriginalFileName);
theOriginalSpec = IPEMStripFileSpecification(theOriginalFile);
if isempty(inMixedFileName)
   inMixedFileName = [theOriginalSpec.Name '_mixed.' theOriginalSpec.Extension];
end;
if isempty(inMixedFilePath)
   inMixedFilePath = theOriginalSpec.Path;
end;
theMixedFile = fullfile(inMixedFilePath,inMixedFileName);

% Get the length of the original sound file
[dummy,fs,theSubPartSize] = IPEMReadSoundFile(inOriginalFileName,inOriginalFilePath,'size');
theSubPartLength = theSubPartSize(1);

% Get size and sampling rate of the mixed sound file
[dummy,fsMixed,theSize] = IPEMReadSoundFile(inMixedFileName,inMixedFilePath,'size');
theLength = theSize(1);

% Setup segments
TimeSegments = IPEMGenerateFrameBasedSegments(theLength/fsMixed,fsMixed,...
    theSubPartLength/fsMixed,theSubPartLength/fsMixed,0);
Segments = IPEMSnipSoundFile(inMixedFileName,inMixedFilePath,TimeSegments);

% Calc roughness for each part
N = size(Segments,1);
outRoughness = zeros(1,N);
for i = 1:N
    
    % Calc ANI
    Sound = IPEMAdaptLevel(Segments{i,:},-20);
    [ANI,ANIFreq,ANIFilterFreqs] = IPEMCalcANI(Sound,fsMixed,[],0);
    
    % Calc roughness and store the result
    if 0
        % analyze sound segment in frames
        [Roughness,RoughnessFreq] = IPEMRoughnessFFT(ANI,ANIFreq,ANIFilterFreqs,[],[],0);
        outRoughness(1,i) = mean(Roughness);
    else 
        % analyze sound segment as a whole
        Duration = length(Sound)/fsMixed;
        [Roughness,RoughnessFreq] = IPEMRoughnessFFT(ANI,ANIFreq,ANIFilterFreqs,Duration,Duration,0);
        outRoughness(1,i) = Roughness;
%        outRoughness(1,i) = rand(1)*100;
    end
end;
outDiffCents = 0:inCentsPerStep:inCentsToRaise;

% Show figure
figure;
plot(outDiffCents,outRoughness);
axis tight;
xlabel('Difference in cents');
ylabel('Roughness');
